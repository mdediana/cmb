#!/bin/bash

set -ue
source $CMB_HOME/env.sh
cd $TMP_DIR

cur_dir=$RES_DIR/$(date +%Y%m%d_%H%M%S); mkdir -p $cur_dir

ping_test() {
  local from=$1; local to=$2
  echo -e "\nFrom: $from" >> ping_test
  ssh root@$from "ping -qc 5 $to" >> ping_test
}

sanity_check() {
  ssh_all_p srv_bench_nodes "cp /proc/meminfo /tmp"
  for_all_p srv_bench_nodes "rsync -azq root@\$n:/tmp/meminfo meminfo.\$n"
  for_all_p srv_bench_nodes "ssh root@\$n \"df\" > df_test.\$n"

  # measure delay after tc
  n1=$(head -1 dc-1)
  n2=$(head -1 dc-2)
  nb=$(head -1 bench_nodes)
  rm -f ping_test
  ping_test $n1 $n2
  ping_test $n2 $n1
  ping_test $nb $n1
  ping_test $nb $n2
}

disk_cache() {
  agg srv_nodes "free -m | egrep Mem: | awk '{print \$7}'"
}

tx_rx() {
  local node_file=$1
  local stat=$2
  agg $node_file "ifconfig eth0 | egrep -o '$stat bytes:[0-9]*' | cut -d: -f2"
}

metrics() {
  local i=$1
  rr[$i]=$(riak_stats read_repairs_total)
  redirs[$i]=$(riak_stats coord_redirs_total)
  mig[$i]=$(riak_stats master_migrations_total)
  wr_master[$i]=$(riak_stats wrong_master_total)
  sibl[$i]=$(riak_stats node_get_fsm_siblings)
  cache[$i]=$(disk_cache)
  tx_srv[$i]=$(tx_rx srv_nodes TX)
  rx_srv[$i]=$(tx_rx srv_nodes RX)
  tx_bch[$i]=$(tx_rx bench_nodes TX)
  rx_bch[$i]=$(tx_rx bench_nodes RX)
}

echo Preparing 
ssh_all_p srv_nodes "echo 3 > /proc/sys/vm/drop_caches"
sanity_check
metrics 0

echo Running
for_all_p bench_nodes "run_basho_bench \$n bench.config"

echo Getting results
for_all_p bench_nodes "rsync -azq root@\$n:$BENCH_HOME/tests/current/ $cur_dir/bch-\$n"
for_all_p srv_nodes "rsync -azq root@\$n:$RIAK_LOG_DIR $cur_dir/srv-\$n"

metrics 1
echo "conflicts=$((rr[1]-rr[0]))
redirs=$((redirs[1]-redirs[0]))
migrations=$((mig[1]-mig[0]))
wrong_master=$((wr_master[1]-wr_master[0]))
siblings=$((sibl[1]-sibl[0]))
disk_cache=$((cache[1]-cache[0]))
tx_srv=$((tx_srv[1]-tx_srv[0]))
rx_srv=$((rx_srv[1]-rx_srv[0]))
tx_bch=$((tx_bch[1]-tx_bch[0]))
rx_bch=$((rx_bch[1]-rx_bch[0]))" > $cur_dir/metrics
cp conf_info $cur_dir
cp bench*.config.* $cur_dir
cp vm.args.* app.config.* $cur_dir
cp meminfo.* df_test.* ping_test $cur_dir

echo -e "\n\nErrors:"
echo "Servers:"; egrep -r "\[error\]" $cur_dir/srv-* || true
echo "errors.csv:"; cat $cur_dir/bch-*/errors.csv

cat $cur_dir/conf_info $cur_dir/metrics

touch $cur_dir/finished
echo "Run finished"
exit 0
